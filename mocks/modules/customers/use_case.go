// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "crud_api/entities"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

type UseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *UseCase) EXPECT() *UseCase_Expecter {
	return &UseCase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: customer
func (_m *UseCase) Create(customer *entities.Customers) error {
	ret := _m.Called(customer)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Customers) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseCase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UseCase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - customer *entities.Customers
func (_e *UseCase_Expecter) Create(customer interface{}) *UseCase_Create_Call {
	return &UseCase_Create_Call{Call: _e.mock.On("Create", customer)}
}

func (_c *UseCase_Create_Call) Run(run func(customer *entities.Customers)) *UseCase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Customers))
	})
	return _c
}

func (_c *UseCase_Create_Call) Return(_a0 error) *UseCase_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCase_Create_Call) RunAndReturn(run func(*entities.Customers) error) *UseCase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ID
func (_m *UseCase) Delete(ID string) (*entities.Customers, error) {
	ret := _m.Called(ID)

	var r0 *entities.Customers
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Customers, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Customers); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Customers)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UseCase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ID string
func (_e *UseCase_Expecter) Delete(ID interface{}) *UseCase_Delete_Call {
	return &UseCase_Delete_Call{Call: _e.mock.On("Delete", ID)}
}

func (_c *UseCase_Delete_Call) Run(run func(ID string)) *UseCase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UseCase_Delete_Call) Return(_a0 *entities.Customers, _a1 error) *UseCase_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCase_Delete_Call) RunAndReturn(run func(string) (*entities.Customers, error)) *UseCase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields:
func (_m *UseCase) Read() ([]entities.Customers, error) {
	ret := _m.Called()

	var r0 []entities.Customers
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.Customers, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.Customers); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Customers)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCase_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type UseCase_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
func (_e *UseCase_Expecter) Read() *UseCase_Read_Call {
	return &UseCase_Read_Call{Call: _e.mock.On("Read")}
}

func (_c *UseCase_Read_Call) Run(run func()) *UseCase_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCase_Read_Call) Return(_a0 []entities.Customers, _a1 error) *UseCase_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCase_Read_Call) RunAndReturn(run func() ([]entities.Customers, error)) *UseCase_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadID provides a mock function with given fields: ID
func (_m *UseCase) ReadID(ID string) ([]entities.Customers, error) {
	ret := _m.Called(ID)

	var r0 []entities.Customers
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entities.Customers, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) []entities.Customers); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Customers)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCase_ReadID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadID'
type UseCase_ReadID_Call struct {
	*mock.Call
}

// ReadID is a helper method to define mock.On call
//   - ID string
func (_e *UseCase_Expecter) ReadID(ID interface{}) *UseCase_ReadID_Call {
	return &UseCase_ReadID_Call{Call: _e.mock.On("ReadID", ID)}
}

func (_c *UseCase_ReadID_Call) Run(run func(ID string)) *UseCase_ReadID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UseCase_ReadID_Call) Return(_a0 []entities.Customers, _a1 error) *UseCase_ReadID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCase_ReadID_Call) RunAndReturn(run func(string) ([]entities.Customers, error)) *UseCase_ReadID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: body, ID
func (_m *UseCase) Update(body entities.Customers, ID string) (*entities.Customers, error) {
	ret := _m.Called(body, ID)

	var r0 *entities.Customers
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Customers, string) (*entities.Customers, error)); ok {
		return rf(body, ID)
	}
	if rf, ok := ret.Get(0).(func(entities.Customers, string) *entities.Customers); ok {
		r0 = rf(body, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Customers)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.Customers, string) error); ok {
		r1 = rf(body, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UseCase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - body entities.Customers
//   - ID string
func (_e *UseCase_Expecter) Update(body interface{}, ID interface{}) *UseCase_Update_Call {
	return &UseCase_Update_Call{Call: _e.mock.On("Update", body, ID)}
}

func (_c *UseCase_Update_Call) Run(run func(body entities.Customers, ID string)) *UseCase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Customers), args[1].(string))
	})
	return _c
}

func (_c *UseCase_Update_Call) Return(_a0 *entities.Customers, _a1 error) *UseCase_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCase_Update_Call) RunAndReturn(run func(entities.Customers, string) (*entities.Customers, error)) *UseCase_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
