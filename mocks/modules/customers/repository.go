// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "crud_api/entities"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// DeleteByID provides a mock function with given fields: ID
func (_m *Repository) DeleteByID(ID string) (*entities.Customers, error) {
	ret := _m.Called(ID)

	var r0 *entities.Customers
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Customers, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Customers); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Customers)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_DeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByID'
type Repository_DeleteByID_Call struct {
	*mock.Call
}

// DeleteByID is a helper method to define mock.On call
//   - ID string
func (_e *Repository_Expecter) DeleteByID(ID interface{}) *Repository_DeleteByID_Call {
	return &Repository_DeleteByID_Call{Call: _e.mock.On("DeleteByID", ID)}
}

func (_c *Repository_DeleteByID_Call) Run(run func(ID string)) *Repository_DeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_DeleteByID_Call) Return(_a0 *entities.Customers, _a1 error) *Repository_DeleteByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_DeleteByID_Call) RunAndReturn(run func(string) (*entities.Customers, error)) *Repository_DeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ID
func (_m *Repository) FindByID(ID string) ([]entities.Customers, error) {
	ret := _m.Called(ID)

	var r0 []entities.Customers
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entities.Customers, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) []entities.Customers); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Customers)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type Repository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ID string
func (_e *Repository_Expecter) FindByID(ID interface{}) *Repository_FindByID_Call {
	return &Repository_FindByID_Call{Call: _e.mock.On("FindByID", ID)}
}

func (_c *Repository_FindByID_Call) Run(run func(ID string)) *Repository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_FindByID_Call) Return(_a0 []entities.Customers, _a1 error) *Repository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_FindByID_Call) RunAndReturn(run func(string) ([]entities.Customers, error)) *Repository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *Repository) GetAll() ([]entities.Customers, error) {
	ret := _m.Called()

	var r0 []entities.Customers
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.Customers, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.Customers); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Customers)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type Repository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *Repository_Expecter) GetAll() *Repository_GetAll_Call {
	return &Repository_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *Repository_GetAll_Call) Run(run func()) *Repository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_GetAll_Call) Return(_a0 []entities.Customers, _a1 error) *Repository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetAll_Call) RunAndReturn(run func() ([]entities.Customers, error)) *Repository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: _a0
func (_m *Repository) Save(_a0 *entities.Customers) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Customers) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Repository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - _a0 *entities.Customers
func (_e *Repository_Expecter) Save(_a0 interface{}) *Repository_Save_Call {
	return &Repository_Save_Call{Call: _e.mock.On("Save", _a0)}
}

func (_c *Repository_Save_Call) Run(run func(_a0 *entities.Customers)) *Repository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Customers))
	})
	return _c
}

func (_c *Repository_Save_Call) Return(_a0 error) *Repository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Save_Call) RunAndReturn(run func(*entities.Customers) error) *Repository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByID provides a mock function with given fields: body, ID
func (_m *Repository) UpdateByID(body entities.Customers, ID string) (*entities.Customers, error) {
	ret := _m.Called(body, ID)

	var r0 *entities.Customers
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Customers, string) (*entities.Customers, error)); ok {
		return rf(body, ID)
	}
	if rf, ok := ret.Get(0).(func(entities.Customers, string) *entities.Customers); ok {
		r0 = rf(body, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Customers)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.Customers, string) error); ok {
		r1 = rf(body, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_UpdateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByID'
type Repository_UpdateByID_Call struct {
	*mock.Call
}

// UpdateByID is a helper method to define mock.On call
//   - body entities.Customers
//   - ID string
func (_e *Repository_Expecter) UpdateByID(body interface{}, ID interface{}) *Repository_UpdateByID_Call {
	return &Repository_UpdateByID_Call{Call: _e.mock.On("UpdateByID", body, ID)}
}

func (_c *Repository_UpdateByID_Call) Run(run func(body entities.Customers, ID string)) *Repository_UpdateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Customers), args[1].(string))
	})
	return _c
}

func (_c *Repository_UpdateByID_Call) Return(_a0 *entities.Customers, _a1 error) *Repository_UpdateByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_UpdateByID_Call) RunAndReturn(run func(entities.Customers, string) (*entities.Customers, error)) *Repository_UpdateByID_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
